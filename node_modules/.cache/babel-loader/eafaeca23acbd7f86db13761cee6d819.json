{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nlet warningWithoutStack = () => {};\n\nif (__DEV__) {\n  warningWithoutStack = function (condition, format, ...args) {\n    if (format === undefined) {\n      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (args.length > 8) {\n      // Check before the condition to catch violations early.\n      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n    }\n\n    if (condition) {\n      return;\n    }\n\n    if (typeof console !== 'undefined') {\n      const argsWithFormat = args.map(item => '' + item);\n      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n      // breaks IE9: https://github.com/facebook/react/issues/13610\n\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      let argIndex = 0;\n      const message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nexport default warningWithoutStack;","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/shared/warningWithoutStack.js"],"names":["warningWithoutStack","__DEV__","condition","format","args","undefined","Error","length","console","argsWithFormat","map","item","unshift","Function","prototype","apply","call","error","argIndex","message","replace","x"],"mappings":"AAAA;;;;;;;AAOA;;;;;;AAOA,IAAIA,mBAAmB,GAAG,MAAM,CAAE,CAAlC;;AAEA,IAAIC,OAAJ,EAAa;AACXD,EAAAA,mBAAmB,GAAG,UAASE,SAAT,EAAoBC,MAApB,EAA4B,GAAGC,IAA/B,EAAqC;AACzD,QAAID,MAAM,KAAKE,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CACJ,0EACE,kBAFE,CAAN;AAID;;AACD,QAAIF,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACnB;AACA,YAAM,IAAID,KAAJ,CACJ,+DADI,CAAN;AAGD;;AACD,QAAIJ,SAAJ,EAAe;AACb;AACD;;AACD,QAAI,OAAOM,OAAP,KAAmB,WAAvB,EAAoC;AAClC,YAAMC,cAAc,GAAGL,IAAI,CAACM,GAAL,CAASC,IAAI,IAAI,KAAKA,IAAtB,CAAvB;AACAF,MAAAA,cAAc,CAACG,OAAf,CAAuB,cAAcT,MAArC,EAFkC,CAIlC;AACA;;AACAU,MAAAA,QAAQ,CAACC,SAAT,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA8BR,OAAO,CAACS,KAAtC,EAA6CT,OAA7C,EAAsDC,cAAtD;AACD;;AACD,QAAI;AACF;AACA;AACA;AACA,UAAIS,QAAQ,GAAG,CAAf;AACA,YAAMC,OAAO,GACX,cAAchB,MAAM,CAACiB,OAAP,CAAe,KAAf,EAAsB,MAAMhB,IAAI,CAACc,QAAQ,EAAT,CAAhC,CADhB;AAEA,YAAM,IAAIZ,KAAJ,CAAUa,OAAV,CAAN;AACD,KARD,CAQE,OAAOE,CAAP,EAAU,CAAE;AACf,GAjCD;AAkCD;;AAED,eAAerB,mBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nlet warningWithoutStack = () => {};\n\nif (__DEV__) {\n  warningWithoutStack = function(condition, format, ...args) {\n    if (format === undefined) {\n      throw new Error(\n        '`warningWithoutStack(condition, format, ...args)` requires a warning ' +\n          'message argument',\n      );\n    }\n    if (args.length > 8) {\n      // Check before the condition to catch violations early.\n      throw new Error(\n        'warningWithoutStack() currently supports at most 8 arguments.',\n      );\n    }\n    if (condition) {\n      return;\n    }\n    if (typeof console !== 'undefined') {\n      const argsWithFormat = args.map(item => '' + item);\n      argsWithFormat.unshift('Warning: ' + format);\n\n      // We intentionally don't use spread (or .apply) directly because it\n      // breaks IE9: https://github.com/facebook/react/issues/13610\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      let argIndex = 0;\n      const message =\n        'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nexport default warningWithoutStack;\n"]},"metadata":{},"sourceType":"module"}