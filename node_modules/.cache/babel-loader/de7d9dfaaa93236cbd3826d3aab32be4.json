{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { FundamentalComponent } from 'shared/ReactWorkTags';\nimport { findCurrentHostFiber, findCurrentHostFiberWithNoPortals } from 'react-reconciler/reflection';\nimport { get as getInstance } from 'shared/ReactInstanceMap';\nimport { HostComponent, ClassComponent } from 'shared/ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport warningWithoutStack from 'shared/warningWithoutStack';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport { getPublicInstance } from './ReactFiberHostConfig';\nimport { findCurrentUnmaskedContext, processChildContext, emptyContextObject, isContextProvider as isLegacyContextProvider } from './ReactFiberContext';\nimport { createFiberRoot } from './ReactFiberRoot';\nimport { injectInternals } from './ReactFiberDevToolsHook';\nimport { computeUniqueAsyncExpiration, requestCurrentTime, computeExpirationForFiber, scheduleWork, flushRoot, batchedEventUpdates, batchedUpdates, unbatchedUpdates, flushSync, flushControlled, deferredUpdates, syncUpdates, discreteUpdates, flushDiscreteUpdates, flushPassiveEffects, warnIfNotScopedWithMatchingAct, warnIfUnmockedScheduler, IsThisRendererActing } from './ReactFiberWorkLoop';\nimport { createUpdate, enqueueUpdate } from './ReactUpdateQueue';\nimport ReactFiberInstrumentation from './ReactFiberInstrumentation';\nimport { getStackByFiberInDevAndProd, phase as ReactCurrentFiberPhase, current as ReactCurrentFiberCurrent } from './ReactCurrentFiber';\nimport { StrictMode } from './ReactTypeOfMode';\nimport { Sync } from './ReactFiberExpirationTime';\nimport { requestCurrentSuspenseConfig } from './ReactFiberSuspenseConfig';\nimport { scheduleRefresh, scheduleRoot, setRefreshHandler, findHostInstancesForRefresh } from './ReactFiberHotReloading';\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction scheduleRootUpdate(current, element, expirationTime, suspenseConfig, callback) {\n  if (__DEV__) {\n    if (ReactCurrentFiberPhase === 'render' && ReactCurrentFiberCurrent !== null && !didWarnAboutNestedUpdates) {\n      didWarnAboutNestedUpdates = true;\n      warningWithoutStack(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentName(ReactCurrentFiberCurrent.type) || 'Unknown');\n    }\n  }\n\n  const update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    warningWithoutStack(typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update);\n  scheduleWork(current, expirationTime);\n  return expirationTime;\n}\n\nexport function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, suspenseConfig, callback) {\n  // TODO: If this is a nested container, this won't be the root.\n  const current = container.current;\n\n  if (__DEV__) {\n    if (ReactFiberInstrumentation.debugTool) {\n      if (current.alternate === null) {\n        ReactFiberInstrumentation.debugTool.onMountContainer(container);\n      } else if (element === null) {\n        ReactFiberInstrumentation.debugTool.onUnmountContainer(container);\n      } else {\n        ReactFiberInstrumentation.debugTool.onUpdateContainer(container);\n      }\n    }\n  }\n\n  const context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  return scheduleRootUpdate(current, element, expirationTime, suspenseConfig, callback);\n}\n\nfunction findHostInstance(component) {\n  const fiber = getInstance(component);\n\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));\n    }\n  }\n\n  const hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(component, methodName) {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));\n      }\n    }\n\n    const hostFiber = findCurrentHostFiber(fiber);\n\n    if (hostFiber === null) {\n      return null;\n    }\n\n    if (hostFiber.mode & StrictMode) {\n      const componentName = getComponentName(fiber.type) || 'Component';\n\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        if (fiber.mode & StrictMode) {\n          warningWithoutStack(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));\n        } else {\n          warningWithoutStack(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));\n        }\n      }\n    }\n\n    return hostFiber.stateNode;\n  }\n\n  return findHostInstance(component);\n}\n\nexport function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {\n  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);\n}\nexport function updateContainer(element, container, parentComponent, callback) {\n  const current = container.current;\n  const currentTime = requestCurrentTime();\n\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfUnmockedScheduler(current);\n      warnIfNotScopedWithMatchingAct(current);\n    }\n  }\n\n  const suspenseConfig = requestCurrentSuspenseConfig();\n  const expirationTime = computeExpirationForFiber(currentTime, current, suspenseConfig);\n  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, suspenseConfig, callback);\n}\nexport { flushRoot, computeUniqueAsyncExpiration, batchedEventUpdates, batchedUpdates, unbatchedUpdates, deferredUpdates, syncUpdates, discreteUpdates, flushDiscreteUpdates, flushControlled, flushSync, flushPassiveEffects, IsThisRendererActing };\nexport function getPublicRootInstance(container) {\n  const containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\nexport { findHostInstance };\nexport { findHostInstanceWithWarning };\nexport function findHostInstanceWithNoPortals(fiber) {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  if (hostFiber.tag === FundamentalComponent) {\n    return hostFiber.stateNode.instance;\n  }\n\n  return hostFiber.stateNode;\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber) {\n  return shouldSuspendImpl(fiber);\n}\nlet overrideHookState = null;\nlet overrideProps = null;\nlet scheduleUpdate = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithSetImpl = (obj, path, idx, value) => {\n    if (idx >= path.length) {\n      return value;\n    }\n\n    const key = path[idx];\n    const updated = Array.isArray(obj) ? obj.slice() : { ...obj\n    }; // $FlowFixMe number or string is fine here\n\n    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (obj, path, value) => {\n    return copyWithSetImpl(obj, path, 0, value);\n  }; // Support DevTools editable values for useState and useReducer.\n\n\n  overrideHookState = (fiber, id, path, value) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n\n    if (currentHook !== null) {\n      const newState = copyWithSet(currentHook.memoizedState, path, value);\n      currentHook.memoizedState = newState;\n      currentHook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = { ...fiber.memoizedProps\n      };\n      scheduleWork(fiber, Sync);\n    }\n  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n  overrideProps = (fiber, path, value) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    scheduleWork(fiber, Sync);\n  };\n\n  scheduleUpdate = fiber => {\n    scheduleWork(fiber, Sync);\n  };\n\n  setSuspenseHandler = newShouldSuspendImpl => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nexport function injectIntoDevTools(devToolsConfig) {\n  const {\n    findFiberByHostInstance\n  } = devToolsConfig;\n  const {\n    ReactCurrentDispatcher\n  } = ReactSharedInternals;\n  return injectInternals({ ...devToolsConfig,\n    overrideHookState,\n    overrideProps,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n\n    findHostInstanceByFiber(fiber) {\n      const hostFiber = findCurrentHostFiber(fiber);\n\n      if (hostFiber === null) {\n        return null;\n      }\n\n      return hostFiber.stateNode;\n    },\n\n    findFiberByHostInstance(instance) {\n      if (!findFiberByHostInstance) {\n        // Might not be implemented by the renderer.\n        return null;\n      }\n\n      return findFiberByHostInstance(instance);\n    },\n\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? () => ReactCurrentFiberCurrent : null\n  });\n}","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react-reconciler/src/ReactFiberReconciler.js"],"names":["FundamentalComponent","findCurrentHostFiber","findCurrentHostFiberWithNoPortals","get","getInstance","HostComponent","ClassComponent","getComponentName","invariant","warningWithoutStack","ReactSharedInternals","getPublicInstance","findCurrentUnmaskedContext","processChildContext","emptyContextObject","isContextProvider","isLegacyContextProvider","createFiberRoot","injectInternals","computeUniqueAsyncExpiration","requestCurrentTime","computeExpirationForFiber","scheduleWork","flushRoot","batchedEventUpdates","batchedUpdates","unbatchedUpdates","flushSync","flushControlled","deferredUpdates","syncUpdates","discreteUpdates","flushDiscreteUpdates","flushPassiveEffects","warnIfNotScopedWithMatchingAct","warnIfUnmockedScheduler","IsThisRendererActing","createUpdate","enqueueUpdate","ReactFiberInstrumentation","getStackByFiberInDevAndProd","phase","ReactCurrentFiberPhase","current","ReactCurrentFiberCurrent","StrictMode","Sync","requestCurrentSuspenseConfig","scheduleRefresh","scheduleRoot","setRefreshHandler","findHostInstancesForRefresh","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","__DEV__","getContextForSubtree","parentComponent","fiber","parentContext","tag","Component","type","scheduleRootUpdate","element","expirationTime","suspenseConfig","callback","update","payload","undefined","updateContainerAtExpirationTime","container","debugTool","alternate","onMountContainer","onUnmountContainer","onUpdateContainer","context","pendingContext","findHostInstance","component","render","Object","keys","hostFiber","stateNode","findHostInstanceWithWarning","methodName","mode","componentName","createContainer","containerInfo","hydrate","hydrationCallbacks","updateContainer","currentTime","jest","getPublicRootInstance","containerFiber","child","findHostInstanceWithNoPortals","instance","shouldSuspendImpl","shouldSuspend","overrideHookState","overrideProps","scheduleUpdate","setSuspenseHandler","copyWithSetImpl","obj","path","idx","value","length","key","updated","Array","isArray","slice","copyWithSet","id","currentHook","memoizedState","next","newState","baseState","memoizedProps","pendingProps","newShouldSuspendImpl","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","ReactCurrentDispatcher","currentDispatcherRef","findHostInstanceByFiber","getCurrentFiber"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber';\nimport type {FiberRoot} from './ReactFiberRoot';\nimport type {RootTag} from 'shared/ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport {FundamentalComponent} from 'shared/ReactWorkTags';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {ExpirationTime} from './ReactFiberExpirationTime';\nimport type {SuspenseConfig} from './ReactFiberSuspenseConfig';\nimport type {SuspenseHydrationCallbacks} from './ReactFiberSuspenseComponent';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from 'react-reconciler/reflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {HostComponent, ClassComponent} from 'shared/ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport warningWithoutStack from 'shared/warningWithoutStack';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext';\nimport {createFiberRoot} from './ReactFiberRoot';\nimport {injectInternals} from './ReactFiberDevToolsHook';\nimport {\n  computeUniqueAsyncExpiration,\n  requestCurrentTime,\n  computeExpirationForFiber,\n  scheduleWork,\n  flushRoot,\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  syncUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushPassiveEffects,\n  warnIfNotScopedWithMatchingAct,\n  warnIfUnmockedScheduler,\n  IsThisRendererActing,\n} from './ReactFiberWorkLoop';\nimport {createUpdate, enqueueUpdate} from './ReactUpdateQueue';\nimport ReactFiberInstrumentation from './ReactFiberInstrumentation';\nimport {\n  getStackByFiberInDevAndProd,\n  phase as ReactCurrentFiberPhase,\n  current as ReactCurrentFiberCurrent,\n} from './ReactCurrentFiber';\nimport {StrictMode} from './ReactTypeOfMode';\nimport {Sync} from './ReactFiberExpirationTime';\nimport {requestCurrentSuspenseConfig} from './ReactFiberSuspenseConfig';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber,\n  // Used by RN in-app inspector.\n  // This API is unfortunately RN-specific.\n  // TODO: Change it to accept Fiber instead and type it properly.\n  getInspectorDataForViewTag?: (tag: number) => Object,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction scheduleRootUpdate(\n  current: Fiber,\n  element: ReactNodeList,\n  expirationTime: ExpirationTime,\n  suspenseConfig: null | SuspenseConfig,\n  callback: ?Function,\n) {\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberPhase === 'render' &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      warningWithoutStack(\n        false,\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentName(ReactCurrentFiberCurrent.type) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(expirationTime, suspenseConfig);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    warningWithoutStack(\n      typeof callback === 'function',\n      'render(...): Expected the last optional `callback` argument to be a ' +\n        'function. Instead received: %s.',\n      callback,\n    );\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update);\n  scheduleWork(current, expirationTime);\n\n  return expirationTime;\n}\n\nexport function updateContainerAtExpirationTime(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  expirationTime: ExpirationTime,\n  suspenseConfig: null | SuspenseConfig,\n  callback: ?Function,\n) {\n  // TODO: If this is a nested container, this won't be the root.\n  const current = container.current;\n\n  if (__DEV__) {\n    if (ReactFiberInstrumentation.debugTool) {\n      if (current.alternate === null) {\n        ReactFiberInstrumentation.debugTool.onMountContainer(container);\n      } else if (element === null) {\n        ReactFiberInstrumentation.debugTool.onUnmountContainer(container);\n      } else {\n        ReactFiberInstrumentation.debugTool.onUpdateContainer(container);\n      }\n    }\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  return scheduleRootUpdate(\n    current,\n    element,\n    expirationTime,\n    suspenseConfig,\n    callback,\n  );\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictMode) {\n      const componentName = getComponentName(fiber.type) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n        if (fiber.mode & StrictMode) {\n          warningWithoutStack(\n            false,\n            '%s is deprecated in StrictMode. ' +\n              '%s was passed an instance of %s which is inside StrictMode. ' +\n              'Instead, add a ref directly to the element you want to reference. ' +\n              'Learn more about using refs safely here: ' +\n              'https://fb.me/react-strict-mode-find-node%s',\n            methodName,\n            methodName,\n            componentName,\n            getStackByFiberInDevAndProd(hostFiber),\n          );\n        } else {\n          warningWithoutStack(\n            false,\n            '%s is deprecated in StrictMode. ' +\n              '%s was passed an instance of %s which renders StrictMode children. ' +\n              'Instead, add a ref directly to the element you want to reference. ' +\n              'Learn more about using refs safely here: ' +\n              'https://fb.me/react-strict-mode-find-node%s',\n            methodName,\n            methodName,\n            componentName,\n            getStackByFiberInDevAndProd(hostFiber),\n          );\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): OpaqueRoot {\n  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): ExpirationTime {\n  const current = container.current;\n  const currentTime = requestCurrentTime();\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfUnmockedScheduler(current);\n      warnIfNotScopedWithMatchingAct(current);\n    }\n  }\n  const suspenseConfig = requestCurrentSuspenseConfig();\n  const expirationTime = computeExpirationForFiber(\n    currentTime,\n    current,\n    suspenseConfig,\n  );\n  return updateContainerAtExpirationTime(\n    element,\n    container,\n    parentComponent,\n    expirationTime,\n    suspenseConfig,\n    callback,\n  );\n}\n\nexport {\n  flushRoot,\n  computeUniqueAsyncExpiration,\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  deferredUpdates,\n  syncUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushControlled,\n  flushSync,\n  flushPassiveEffects,\n  IsThisRendererActing,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  if (hostFiber.tag === FundamentalComponent) {\n    return hostFiber.stateNode.instance;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideProps = null;\nlet scheduleUpdate = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    idx: number,\n    value: any,\n  ) => {\n    if (idx >= path.length) {\n      return value;\n    }\n    const key = path[idx];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    if (currentHook !== null) {\n      const newState = copyWithSet(currentHook.memoizedState, path, value);\n      currentHook.memoizedState = newState;\n      currentHook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleWork(fiber, Sync);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleWork(fiber, Sync);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleWork(fiber, Sync);\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    ...devToolsConfig,\n    overrideHookState,\n    overrideProps,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n      const hostFiber = findCurrentHostFiber(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    },\n    findFiberByHostInstance(instance: Instance | TextInstance): Fiber | null {\n      if (!findFiberByHostInstance) {\n        // Might not be implemented by the renderer.\n        return null;\n      }\n      return findFiberByHostInstance(instance);\n    },\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? () => ReactCurrentFiberCurrent : null,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}