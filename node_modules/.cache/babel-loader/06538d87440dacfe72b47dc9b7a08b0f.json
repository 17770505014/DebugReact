{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { enableTrustedTypesIntegration } from 'shared/ReactFeatureFlags';\n// Flow does not allow string concatenation of most non-string types. To work\n// around this limitation, we use an opaque type that can only be obtained by\n// passing the value through getToStringValue first.\nexport function toString(value) {\n  return '' + value;\n}\nexport function getToStringValue(value) {\n  switch (typeof value) {\n    case 'boolean':\n    case 'number':\n    case 'object':\n    case 'string':\n    case 'undefined':\n      return value;\n\n    default:\n      // function, symbol are assigned as empty strings\n      return '';\n  }\n}\n/**\n * Returns true only if Trusted Types are available in global object and the value is a trusted type.\n */\n\nlet isTrustedTypesValue; // $FlowExpectedError - TrustedTypes are defined only in some browsers or with polyfill\n\nif (enableTrustedTypesIntegration && typeof trustedTypes !== 'undefined') {\n  isTrustedTypesValue = value => trustedTypes.isHTML(value) || trustedTypes.isScript(value) || trustedTypes.isScriptURL(value) || // TrustedURLs are deprecated and will be removed soon: https://github.com/WICG/trusted-types/pull/204\n  trustedTypes.isURL && trustedTypes.isURL(value);\n} else {\n  isTrustedTypesValue = () => false;\n}\n/** Trusted value is a wrapper for \"safe\" values which can be assigned to DOM execution sinks. */\n\n\n/**\n * We allow passing objects with toString method as element attributes or in dangerouslySetInnerHTML\n * and we do validations that the value is safe. Once we do validation we want to use the validated\n * value instead of the object (because object.toString may return something else on next call).\n *\n * If application uses Trusted Types we don't stringify trusted values, but preserve them as objects.\n */\nexport function toStringOrTrustedType(value) {\n  if (enableTrustedTypesIntegration && // fast-path string values as it's most frequent usage of the function\n  typeof value !== 'string' && isTrustedTypesValue(value)) {\n    return value;\n  } else {\n    return '' + value;\n  }\n}","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react-dom/src/client/ToStringValue.js"],"names":["enableTrustedTypesIntegration","toString","value","getToStringValue","isTrustedTypesValue","trustedTypes","isHTML","isScript","isScriptURL","isURL","toStringOrTrustedType"],"mappings":"AAAA;;;;;;;;AASA,SAAQA,6BAAR,QAA4C,0BAA5C;AAUA;AACA;AACA;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAgD;AACrD,SAAO,KAAMA,KAAb;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BD,KAA1B,EAAuD;AAC5D,UAAQ,OAAOA,KAAf;AACE,SAAK,SAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,WAAL;AACE,aAAOA,KAAP;;AACF;AACE;AACA,aAAO,EAAP;AATJ;AAWD;AAED;;;;AAGA,IAAIE,mBAAJ,C,CACA;;AACA,IAAIJ,6BAA6B,IAAI,OAAOK,YAAP,KAAwB,WAA7D,EAA0E;AACxED,EAAAA,mBAAmB,GAAIF,KAAD,IACpBG,YAAY,CAACC,MAAb,CAAoBJ,KAApB,KACAG,YAAY,CAACE,QAAb,CAAsBL,KAAtB,CADA,IAEAG,YAAY,CAACG,WAAb,CAAyBN,KAAzB,CAFA,IAGA;AACCG,EAAAA,YAAY,CAACI,KAAb,IAAsBJ,YAAY,CAACI,KAAb,CAAmBP,KAAnB,CALzB;AAMD,CAPD,MAOO;AACLE,EAAAA,mBAAmB,GAAG,MAAM,KAA5B;AACD;AAED;;;AAMA;;;;;;;AAOA,OAAO,SAASM,qBAAT,CAA+BR,KAA/B,EAAkE;AACvE,MACEF,6BAA6B,IAC7B;AACA,SAAOE,KAAP,KAAiB,QAFjB,IAGAE,mBAAmB,CAACF,KAAD,CAJrB,EAKE;AACA,WAAOA,KAAP;AACD,GAPD,MAOO;AACL,WAAO,KAAKA,KAAZ;AACD;AACF","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableTrustedTypesIntegration} from 'shared/ReactFeatureFlags';\n\nexport opaque type ToStringValue =\n  | boolean\n  | number\n  | Object\n  | string\n  | null\n  | void;\n\n// Flow does not allow string concatenation of most non-string types. To work\n// around this limitation, we use an opaque type that can only be obtained by\n// passing the value through getToStringValue first.\nexport function toString(value: ToStringValue): string {\n  return '' + (value: any);\n}\n\nexport function getToStringValue(value: mixed): ToStringValue {\n  switch (typeof value) {\n    case 'boolean':\n    case 'number':\n    case 'object':\n    case 'string':\n    case 'undefined':\n      return value;\n    default:\n      // function, symbol are assigned as empty strings\n      return '';\n  }\n}\n\n/**\n * Returns true only if Trusted Types are available in global object and the value is a trusted type.\n */\nlet isTrustedTypesValue: (value: any) => boolean;\n// $FlowExpectedError - TrustedTypes are defined only in some browsers or with polyfill\nif (enableTrustedTypesIntegration && typeof trustedTypes !== 'undefined') {\n  isTrustedTypesValue = (value: any) =>\n    trustedTypes.isHTML(value) ||\n    trustedTypes.isScript(value) ||\n    trustedTypes.isScriptURL(value) ||\n    // TrustedURLs are deprecated and will be removed soon: https://github.com/WICG/trusted-types/pull/204\n    (trustedTypes.isURL && trustedTypes.isURL(value));\n} else {\n  isTrustedTypesValue = () => false;\n}\n\n/** Trusted value is a wrapper for \"safe\" values which can be assigned to DOM execution sinks. */\nexport opaque type TrustedValue: {toString(): string, valueOf(): string} = {\n  toString(): string,\n  valueOf(): string,\n};\n\n/**\n * We allow passing objects with toString method as element attributes or in dangerouslySetInnerHTML\n * and we do validations that the value is safe. Once we do validation we want to use the validated\n * value instead of the object (because object.toString may return something else on next call).\n *\n * If application uses Trusted Types we don't stringify trusted values, but preserve them as objects.\n */\nexport function toStringOrTrustedType(value: any): string | TrustedValue {\n  if (\n    enableTrustedTypesIntegration &&\n    // fast-path string values as it's most frequent usage of the function\n    typeof value !== 'string' &&\n    isTrustedTypesValue(value)\n  ) {\n    return value;\n  } else {\n    return '' + value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}