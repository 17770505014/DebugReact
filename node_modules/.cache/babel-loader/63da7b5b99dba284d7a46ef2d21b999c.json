{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { registrationNameModules, possibleRegistrationNames } from 'legacy-events/EventPluginRegistry';\nimport warning from 'shared/warning';\nimport { ATTRIBUTE_NAME_CHAR, BOOLEAN, RESERVED, shouldRemoveAttributeWithWarning, getPropertyInfo } from './DOMProperty';\nimport isCustomComponent from './isCustomComponent';\nimport possibleStandardNames from './possibleStandardNames';\n\nlet validateProperty = () => {};\n\nif (__DEV__) {\n  const warnedProperties = {};\n  const hasOwnProperty = Object.prototype.hasOwnProperty;\n  const EVENT_NAME_REGEX = /^on./;\n  const INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n  const rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\n  const rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\n  validateProperty = function (tagName, name, value, canUseEventSystem) {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    const lowerCasedName = name.toLowerCase();\n\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n      warnedProperties[name] = true;\n      return true;\n    } // We can't rely on the event system being injected on the server.\n\n\n    if (canUseEventSystem) {\n      if (registrationNameModules.hasOwnProperty(name)) {\n        return true;\n      }\n\n      const registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n\n      if (registrationName != null) {\n        warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);\n        warnedProperties[name] = true;\n        return true;\n      }\n\n      if (EVENT_NAME_REGEX.test(name)) {\n        warning(false, 'Unknown event handler property `%s`. It will be ignored.', name);\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        warning(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);\n      }\n\n      warnedProperties[name] = true;\n      return true;\n    } // Let the ARIA attribute hook validate ARIA attributes\n\n\n    if (rARIA.test(name) || rARIACamel.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    const propertyInfo = getPropertyInfo(name);\n    const isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.\n\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      const standardName = possibleStandardNames[lowerCasedName];\n\n      if (standardName !== name) {\n        warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (!isReserved && name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      if (value) {\n        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n      } else {\n        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);\n      }\n\n      warnedProperties[name] = true;\n      return true;\n    } // Now that we've validated casing, do not validate\n    // data types for reserved props\n\n\n    if (isReserved) {\n      return true;\n    } // Warn when a known attribute is a bad type\n\n\n    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      warnedProperties[name] = true;\n      return false;\n    } // Warn when passing the strings 'false' or 'true' into a boolean prop\n\n\n    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {\n      warning(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    return true;\n  };\n}\n\nconst warnUnknownProperties = function (type, props, canUseEventSystem) {\n  const unknownProps = [];\n\n  for (const key in props) {\n    const isValid = validateProperty(type, key, props[key], canUseEventSystem);\n\n    if (!isValid) {\n      unknownProps.push(key);\n    }\n  }\n\n  const unknownPropString = unknownProps.map(prop => '`' + prop + '`').join(', ');\n\n  if (unknownProps.length === 1) {\n    warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);\n  } else if (unknownProps.length > 1) {\n    warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);\n  }\n};\n\nexport function validateProperties(type, props, canUseEventSystem) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n\n  warnUnknownProperties(type, props, canUseEventSystem);\n}","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react-dom/src/shared/ReactDOMUnknownPropertyHook.js"],"names":["registrationNameModules","possibleRegistrationNames","warning","ATTRIBUTE_NAME_CHAR","BOOLEAN","RESERVED","shouldRemoveAttributeWithWarning","getPropertyInfo","isCustomComponent","possibleStandardNames","validateProperty","__DEV__","warnedProperties","hasOwnProperty","Object","prototype","EVENT_NAME_REGEX","INVALID_EVENT_NAME_REGEX","rARIA","RegExp","rARIACamel","tagName","name","value","canUseEventSystem","call","lowerCasedName","toLowerCase","registrationName","test","undefined","isNaN","propertyInfo","isReserved","type","standardName","warnUnknownProperties","props","unknownProps","key","isValid","push","unknownPropString","map","prop","join","length","validateProperties"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  registrationNameModules,\n  possibleRegistrationNames,\n} from 'legacy-events/EventPluginRegistry';\nimport warning from 'shared/warning';\n\nimport {\n  ATTRIBUTE_NAME_CHAR,\n  BOOLEAN,\n  RESERVED,\n  shouldRemoveAttributeWithWarning,\n  getPropertyInfo,\n} from './DOMProperty';\nimport isCustomComponent from './isCustomComponent';\nimport possibleStandardNames from './possibleStandardNames';\n\nlet validateProperty = () => {};\n\nif (__DEV__) {\n  const warnedProperties = {};\n  const hasOwnProperty = Object.prototype.hasOwnProperty;\n  const EVENT_NAME_REGEX = /^on./;\n  const INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n  const rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\n  const rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\n  validateProperty = function(tagName, name, value, canUseEventSystem) {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    const lowerCasedName = name.toLowerCase();\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      warning(\n        false,\n        'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +\n          'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +\n          'are not needed/supported by React.',\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // We can't rely on the event system being injected on the server.\n    if (canUseEventSystem) {\n      if (registrationNameModules.hasOwnProperty(name)) {\n        return true;\n      }\n      const registrationName = possibleRegistrationNames.hasOwnProperty(\n        lowerCasedName,\n      )\n        ? possibleRegistrationNames[lowerCasedName]\n        : null;\n      if (registrationName != null) {\n        warning(\n          false,\n          'Invalid event handler property `%s`. Did you mean `%s`?',\n          name,\n          registrationName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n      if (EVENT_NAME_REGEX.test(name)) {\n        warning(\n          false,\n          'Unknown event handler property `%s`. It will be ignored.',\n          name,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        warning(\n          false,\n          'Invalid event handler property `%s`. ' +\n            'React events use the camelCase naming convention, for example `onClick`.',\n          name,\n        );\n      }\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Let the ARIA attribute hook validate ARIA attributes\n    if (rARIA.test(name) || rARIACamel.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      warning(\n        false,\n        'Directly setting property `innerHTML` is not permitted. ' +\n          'For more information, lookup documentation on `dangerouslySetInnerHTML`.',\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      warning(\n        false,\n        'The `aria` attribute is reserved for future use in React. ' +\n          'Pass individual `aria-` attributes instead.',\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (\n      lowerCasedName === 'is' &&\n      value !== null &&\n      value !== undefined &&\n      typeof value !== 'string'\n    ) {\n      warning(\n        false,\n        'Received a `%s` for a string attribute `is`. If this is expected, cast ' +\n          'the value to a string.',\n        typeof value,\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      warning(\n        false,\n        'Received NaN for the `%s` attribute. If this is expected, cast ' +\n          'the value to a string.',\n        name,\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    const propertyInfo = getPropertyInfo(name);\n    const isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;\n\n    // Known attributes should match the casing specified in the property config.\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      const standardName = possibleStandardNames[lowerCasedName];\n      if (standardName !== name) {\n        warning(\n          false,\n          'Invalid DOM property `%s`. Did you mean `%s`?',\n          name,\n          standardName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (!isReserved && name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      warning(\n        false,\n        'React does not recognize the `%s` prop on a DOM element. If you ' +\n          'intentionally want it to appear in the DOM as a custom ' +\n          'attribute, spell it as lowercase `%s` instead. ' +\n          'If you accidentally passed it from a parent component, remove ' +\n          'it from the DOM element.',\n        name,\n        lowerCasedName,\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (\n      typeof value === 'boolean' &&\n      shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)\n    ) {\n      if (value) {\n        warning(\n          false,\n          'Received `%s` for a non-boolean attribute `%s`.\\n\\n' +\n            'If you want to write it to the DOM, pass a string instead: ' +\n            '%s=\"%s\" or %s={value.toString()}.',\n          value,\n          name,\n          name,\n          value,\n          name,\n        );\n      } else {\n        warning(\n          false,\n          'Received `%s` for a non-boolean attribute `%s`.\\n\\n' +\n            'If you want to write it to the DOM, pass a string instead: ' +\n            '%s=\"%s\" or %s={value.toString()}.\\n\\n' +\n            'If you used to conditionally omit it with %s={condition && value}, ' +\n            'pass %s={condition ? value : undefined} instead.',\n          value,\n          name,\n          name,\n          value,\n          name,\n          name,\n          name,\n        );\n      }\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Now that we've validated casing, do not validate\n    // data types for reserved props\n    if (isReserved) {\n      return true;\n    }\n\n    // Warn when a known attribute is a bad type\n    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      warnedProperties[name] = true;\n      return false;\n    }\n\n    // Warn when passing the strings 'false' or 'true' into a boolean prop\n    if (\n      (value === 'false' || value === 'true') &&\n      propertyInfo !== null &&\n      propertyInfo.type === BOOLEAN\n    ) {\n      warning(\n        false,\n        'Received the string `%s` for the boolean attribute `%s`. ' +\n          '%s ' +\n          'Did you mean %s={%s}?',\n        value,\n        name,\n        value === 'false'\n          ? 'The browser will interpret it as a truthy value.'\n          : 'Although this works, it will not work as expected if you pass the string \"false\".',\n        name,\n        value,\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    return true;\n  };\n}\n\nconst warnUnknownProperties = function(type, props, canUseEventSystem) {\n  const unknownProps = [];\n  for (const key in props) {\n    const isValid = validateProperty(type, key, props[key], canUseEventSystem);\n    if (!isValid) {\n      unknownProps.push(key);\n    }\n  }\n\n  const unknownPropString = unknownProps\n    .map(prop => '`' + prop + '`')\n    .join(', ');\n  if (unknownProps.length === 1) {\n    warning(\n      false,\n      'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +\n        'or pass a string or number value to keep it in the DOM. ' +\n        'For details, see https://fb.me/react-attribute-behavior',\n      unknownPropString,\n      type,\n    );\n  } else if (unknownProps.length > 1) {\n    warning(\n      false,\n      'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +\n        'or pass a string or number value to keep them in the DOM. ' +\n        'For details, see https://fb.me/react-attribute-behavior',\n      unknownPropString,\n      type,\n    );\n  }\n};\n\nexport function validateProperties(type, props, canUseEventSystem) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n  warnUnknownProperties(type, props, canUseEventSystem);\n}\n"]},"metadata":{},"sourceType":"module"}