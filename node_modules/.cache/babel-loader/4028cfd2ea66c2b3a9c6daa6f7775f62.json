{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { Namespaces } from '../shared/DOMNamespaces';\nimport createMicrosoftUnsafeLocalFunction from '../shared/createMicrosoftUnsafeLocalFunction';\nimport warning from 'shared/warning';\nimport { enableTrustedTypesIntegration } from 'shared/ReactFeatureFlags'; // SVG temp container for IE lacking innerHTML\n\nlet reusableSVGContainer;\n/**\n * Set the innerHTML property of a node\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\n\nconst setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\n  if (node.namespaceURI === Namespaces.svg) {\n    if (__DEV__) {\n      if (enableTrustedTypesIntegration) {\n        // TODO: reconsider the text of this warning and when it should show\n        // before enabling the feature flag.\n        warning(typeof trustedTypes === 'undefined', \"Using 'dangerouslySetInnerHTML' in an svg element with \" + 'Trusted Types enabled in an Internet Explorer will cause ' + 'the trusted value to be converted to string. Assigning string ' + \"to 'innerHTML' will throw an error if Trusted Types are enforced. \" + \"You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' \" + 'on the enclosing div instead.');\n      }\n    }\n\n    if (!('innerHTML' in node)) {\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\n      // new markup in a temp node and then move the child nodes across into\n      // the target node\n      reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';\n      const svgNode = reusableSVGContainer.firstChild;\n\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n\n      while (svgNode.firstChild) {\n        node.appendChild(svgNode.firstChild);\n      }\n\n      return;\n    }\n  }\n\n  node.innerHTML = html;\n});\nexport default setInnerHTML;","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react-dom/src/client/setInnerHTML.js"],"names":["Namespaces","createMicrosoftUnsafeLocalFunction","warning","enableTrustedTypesIntegration","reusableSVGContainer","setInnerHTML","node","html","namespaceURI","svg","__DEV__","trustedTypes","document","createElement","innerHTML","valueOf","toString","svgNode","firstChild","removeChild","appendChild"],"mappings":"AAAA;;;;;;;;AASA,SAAQA,UAAR,QAAyB,yBAAzB;AACA,OAAOC,kCAAP,MAA+C,8CAA/C;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,SAAQC,6BAAR,QAA4C,0BAA5C,C,CAEA;;AACA,IAAIC,oBAAJ;AAEA;;;;;;;;AAOA,MAAMC,YAAY,GAAGJ,kCAAkC,CAAC,UACtDK,IADsD,EAEtDC,IAFsD,EAGhD;AACN,MAAID,IAAI,CAACE,YAAL,KAAsBR,UAAU,CAACS,GAArC,EAA0C;AACxC,QAAIC,OAAJ,EAAa;AACX,UAAIP,6BAAJ,EAAmC;AACjC;AACA;AACAD,QAAAA,OAAO,CACL,OAAOS,YAAP,KAAwB,WADnB,EAEL,4DACE,2DADF,GAEE,gEAFF,GAGE,oEAHF,GAIE,sFAJF,GAKE,+BAPG,CAAP;AASD;AACF;;AACD,QAAI,EAAE,eAAeL,IAAjB,CAAJ,EAA4B;AAC1B;AACA;AACA;AACAF,MAAAA,oBAAoB,GAClBA,oBAAoB,IAAIQ,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAD1B;AAEAT,MAAAA,oBAAoB,CAACU,SAArB,GACE,UAAUP,IAAI,CAACQ,OAAL,GAAeC,QAAf,EAAV,GAAsC,QADxC;AAEA,YAAMC,OAAO,GAAGb,oBAAoB,CAACc,UAArC;;AACA,aAAOZ,IAAI,CAACY,UAAZ,EAAwB;AACtBZ,QAAAA,IAAI,CAACa,WAAL,CAAiBb,IAAI,CAACY,UAAtB;AACD;;AACD,aAAOD,OAAO,CAACC,UAAf,EAA2B;AACzBZ,QAAAA,IAAI,CAACc,WAAL,CAAiBH,OAAO,CAACC,UAAzB;AACD;;AACD;AACD;AACF;;AACDZ,EAAAA,IAAI,CAACQ,SAAL,GAAkBP,IAAlB;AACD,CAvCsD,CAAvD;AAyCA,eAAeF,YAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {Namespaces} from '../shared/DOMNamespaces';\nimport createMicrosoftUnsafeLocalFunction from '../shared/createMicrosoftUnsafeLocalFunction';\nimport warning from 'shared/warning';\nimport type {TrustedValue} from './ToStringValue';\nimport {enableTrustedTypesIntegration} from 'shared/ReactFeatureFlags';\n\n// SVG temp container for IE lacking innerHTML\nlet reusableSVGContainer;\n\n/**\n * Set the innerHTML property of a node\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nconst setInnerHTML = createMicrosoftUnsafeLocalFunction(function(\n  node: Element,\n  html: string | TrustedValue,\n): void {\n  if (node.namespaceURI === Namespaces.svg) {\n    if (__DEV__) {\n      if (enableTrustedTypesIntegration) {\n        // TODO: reconsider the text of this warning and when it should show\n        // before enabling the feature flag.\n        warning(\n          typeof trustedTypes === 'undefined',\n          \"Using 'dangerouslySetInnerHTML' in an svg element with \" +\n            'Trusted Types enabled in an Internet Explorer will cause ' +\n            'the trusted value to be converted to string. Assigning string ' +\n            \"to 'innerHTML' will throw an error if Trusted Types are enforced. \" +\n            \"You can try to wrap your svg element inside a div and use 'dangerouslySetInnerHTML' \" +\n            'on the enclosing div instead.',\n        );\n      }\n    }\n    if (!('innerHTML' in node)) {\n      // IE does not have innerHTML for SVG nodes, so instead we inject the\n      // new markup in a temp node and then move the child nodes across into\n      // the target node\n      reusableSVGContainer =\n        reusableSVGContainer || document.createElement('div');\n      reusableSVGContainer.innerHTML =\n        '<svg>' + html.valueOf().toString() + '</svg>';\n      const svgNode = reusableSVGContainer.firstChild;\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n      while (svgNode.firstChild) {\n        node.appendChild(svgNode.firstChild);\n      }\n      return;\n    }\n  }\n  node.innerHTML = (html: any);\n});\n\nexport default setInnerHTML;\n"]},"metadata":{},"sourceType":"module"}