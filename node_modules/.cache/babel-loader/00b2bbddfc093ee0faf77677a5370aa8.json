{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nlet lowPriorityWarning = function () {};\n\nif (__DEV__) {\n  const printWarning = function (format, ...args) {\n    let argIndex = 0;\n    const message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function (condition, format, ...args) {\n    if (format === undefined) {\n      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (!condition) {\n      printWarning(format, ...args);\n    }\n  };\n}\n\nexport default lowPriorityWarning;","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/shared/lowPriorityWarning.js"],"names":["lowPriorityWarning","__DEV__","printWarning","format","args","argIndex","message","replace","console","warn","Error","x","condition","undefined"],"mappings":"AAAA;;;;;;;AAOA;;;;;;;;;;;;;AAcA,IAAIA,kBAAkB,GAAG,YAAW,CAAE,CAAtC;;AAEA,IAAIC,OAAJ,EAAa;AACX,QAAMC,YAAY,GAAG,UAASC,MAAT,EAAiB,GAAGC,IAApB,EAA0B;AAC7C,QAAIC,QAAQ,GAAG,CAAf;AACA,UAAMC,OAAO,GAAG,cAAcH,MAAM,CAACI,OAAP,CAAe,KAAf,EAAsB,MAAMH,IAAI,CAACC,QAAQ,EAAT,CAAhC,CAA9B;;AACA,QAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,MAAAA,OAAO,CAACC,IAAR,CAAaH,OAAb;AACD;;AACD,QAAI;AACF;AACA;AACA;AACA,YAAM,IAAII,KAAJ,CAAUJ,OAAV,CAAN;AACD,KALD,CAKE,OAAOK,CAAP,EAAU,CAAE;AACf,GAZD;;AAcAX,EAAAA,kBAAkB,GAAG,UAASY,SAAT,EAAoBT,MAApB,EAA4B,GAAGC,IAA/B,EAAqC;AACxD,QAAID,MAAM,KAAKU,SAAf,EAA0B;AACxB,YAAM,IAAIH,KAAJ,CACJ,yEACE,kBAFE,CAAN;AAID;;AACD,QAAI,CAACE,SAAL,EAAgB;AACdV,MAAAA,YAAY,CAACC,MAAD,EAAS,GAAGC,IAAZ,CAAZ;AACD;AACF,GAVD;AAWD;;AAED,eAAeJ,kBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nlet lowPriorityWarning = function() {};\n\nif (__DEV__) {\n  const printWarning = function(format, ...args) {\n    let argIndex = 0;\n    const message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function(condition, format, ...args) {\n    if (format === undefined) {\n      throw new Error(\n        '`lowPriorityWarning(condition, format, ...args)` requires a warning ' +\n          'message argument',\n      );\n    }\n    if (!condition) {\n      printWarning(format, ...args);\n    }\n  };\n}\n\nexport default lowPriorityWarning;\n"]},"metadata":{},"sourceType":"module"}