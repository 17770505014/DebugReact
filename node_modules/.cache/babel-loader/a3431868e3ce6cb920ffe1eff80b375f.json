{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport warning from 'shared/warning';\n\nlet warnValidStyle = () => {};\n\nif (__DEV__) {\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  const badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n  const msPattern = /^-ms-/;\n  const hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n\n  const badStyleValueWithSemicolonPattern = /;\\s*$/;\n  const warnedStyleNames = {};\n  const warnedStyleValues = {};\n  let warnedForNaNValue = false;\n  let warnedForInfinityValue = false;\n\n  const camelize = function (string) {\n    return string.replace(hyphenPattern, function (_, character) {\n      return character.toUpperCase();\n    });\n  };\n\n  const warnHyphenatedStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests\n    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n    // is converted to lowercase `ms`.\n    camelize(name.replace(msPattern, 'ms-')));\n  };\n\n  const warnBadVendoredStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));\n  };\n\n  const warnStyleValueWithSemicolon = function (name, value) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    warning(false, \"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  };\n\n  const warnStyleValueIsNaN = function (name, value) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    warning(false, '`NaN` is an invalid value for the `%s` css style property.', name);\n  };\n\n  const warnStyleValueIsInfinity = function (name, value) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n    warning(false, '`Infinity` is an invalid value for the `%s` css style property.', name);\n  };\n\n  warnValidStyle = function (name, value) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value);\n      }\n    }\n  };\n}\n\nexport default warnValidStyle;","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react-dom/src/shared/warnValidStyle.js"],"names":["warning","warnValidStyle","__DEV__","badVendoredStyleNamePattern","msPattern","hyphenPattern","badStyleValueWithSemicolonPattern","warnedStyleNames","warnedStyleValues","warnedForNaNValue","warnedForInfinityValue","camelize","string","replace","_","character","toUpperCase","warnHyphenatedStyleName","name","hasOwnProperty","warnBadVendoredStyleName","charAt","slice","warnStyleValueWithSemicolon","value","warnStyleValueIsNaN","warnStyleValueIsInfinity","indexOf","test","isNaN","isFinite"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport warning from 'shared/warning';\n\nlet warnValidStyle = () => {};\n\nif (__DEV__) {\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  const badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n  const msPattern = /^-ms-/;\n  const hyphenPattern = /-(.)/g;\n\n  // style values shouldn't contain a semicolon\n  const badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n  const warnedStyleNames = {};\n  const warnedStyleValues = {};\n  let warnedForNaNValue = false;\n  let warnedForInfinityValue = false;\n\n  const camelize = function(string) {\n    return string.replace(hyphenPattern, function(_, character) {\n      return character.toUpperCase();\n    });\n  };\n\n  const warnHyphenatedStyleName = function(name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(\n      false,\n      'Unsupported style property %s. Did you mean %s?',\n      name,\n      // As Andi Smith suggests\n      // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n      // is converted to lowercase `ms`.\n      camelize(name.replace(msPattern, 'ms-')),\n    );\n  };\n\n  const warnBadVendoredStyleName = function(name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(\n      false,\n      'Unsupported vendor-prefixed style property %s. Did you mean %s?',\n      name,\n      name.charAt(0).toUpperCase() + name.slice(1),\n    );\n  };\n\n  const warnStyleValueWithSemicolon = function(name, value) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    warning(\n      false,\n      \"Style property values shouldn't contain a semicolon. \" +\n        'Try \"%s: %s\" instead.',\n      name,\n      value.replace(badStyleValueWithSemicolonPattern, ''),\n    );\n  };\n\n  const warnStyleValueIsNaN = function(name, value) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    warning(\n      false,\n      '`NaN` is an invalid value for the `%s` css style property.',\n      name,\n    );\n  };\n\n  const warnStyleValueIsInfinity = function(name, value) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n    warning(\n      false,\n      '`Infinity` is an invalid value for the `%s` css style property.',\n      name,\n    );\n  };\n\n  warnValidStyle = function(name, value) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value);\n      }\n    }\n  };\n}\n\nexport default warnValidStyle;\n"]},"metadata":{},"sourceType":"module"}