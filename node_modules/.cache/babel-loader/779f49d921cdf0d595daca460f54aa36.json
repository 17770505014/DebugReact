{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from 'shared/invariant';\nimport warning from 'shared/warning';\nimport ReactControlledValuePropTypes from '../shared/ReactControlledValuePropTypes';\nimport { getCurrentFiberOwnerNameInDevOrNull } from 'react-reconciler/src/ReactCurrentFiber';\nimport { getToStringValue, toString } from './ToStringValue';\nlet didWarnValDefaultVal = false;\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nexport function getHostProps(element, props) {\n  const node = element;\n  invariant(props.dangerouslySetInnerHTML == null, '`dangerouslySetInnerHTML` does not make sense on <textarea>.'); // Always set children to the same thing. In IE9, the selection range will\n  // get reset if `textContent` is mutated.  We could add a check in setTextContent\n  // to only set the value if/when the value differs from the node value (which would\n  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\n  // solution. The value can be a boolean or object so that's why it's forced\n  // to be a string.\n\n  const hostProps = { ...props,\n    value: undefined,\n    defaultValue: undefined,\n    children: toString(node._wrapperState.initialValue)\n  };\n  return hostProps;\n}\nexport function initWrapperState(element, props) {\n  const node = element;\n\n  if (__DEV__) {\n    ReactControlledValuePropTypes.checkPropTypes('textarea', props);\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n      warning(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');\n      didWarnValDefaultVal = true;\n    }\n  }\n\n  let initialValue = props.value; // Only bother fetching default value if we're going to use it\n\n  if (initialValue == null) {\n    let defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.\n\n    let children = props.children;\n\n    if (children != null) {\n      if (__DEV__) {\n        warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n      }\n\n      invariant(defaultValue == null, 'If you supply `defaultValue` on a <textarea>, do not pass children.');\n\n      if (Array.isArray(children)) {\n        invariant(children.length <= 1, '<textarea> can only have at most one child.');\n        children = children[0];\n      }\n\n      defaultValue = children;\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    initialValue = defaultValue;\n  }\n\n  node._wrapperState = {\n    initialValue: getToStringValue(initialValue)\n  };\n}\nexport function updateWrapper(element, props) {\n  const node = element;\n  const value = getToStringValue(props.value);\n  const defaultValue = getToStringValue(props.defaultValue);\n\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    const newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed\n\n    if (newValue !== node.value) {\n      node.value = newValue;\n    }\n\n    if (props.defaultValue == null && node.defaultValue !== newValue) {\n      node.defaultValue = newValue;\n    }\n  }\n\n  if (defaultValue != null) {\n    node.defaultValue = toString(defaultValue);\n  }\n}\nexport function postMountWrapper(element, props) {\n  const node = element; // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n\n  const textContent = node.textContent; // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n\n  if (textContent === node._wrapperState.initialValue) {\n    node.value = textContent;\n  }\n}\nexport function restoreControlledState(element, props) {\n  // DOM component is still mounted; update\n  updateWrapper(element, props);\n}","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react-dom/src/client/ReactDOMTextarea.js"],"names":["invariant","warning","ReactControlledValuePropTypes","getCurrentFiberOwnerNameInDevOrNull","getToStringValue","toString","didWarnValDefaultVal","getHostProps","element","props","node","dangerouslySetInnerHTML","hostProps","value","undefined","defaultValue","children","_wrapperState","initialValue","initWrapperState","__DEV__","checkPropTypes","Array","isArray","length","updateWrapper","newValue","postMountWrapper","textContent","restoreControlledState"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport warning from 'shared/warning';\n\nimport ReactControlledValuePropTypes from '../shared/ReactControlledValuePropTypes';\nimport {getCurrentFiberOwnerNameInDevOrNull} from 'react-reconciler/src/ReactCurrentFiber';\nimport {getToStringValue, toString} from './ToStringValue';\nimport type {ToStringValue} from './ToStringValue';\n\nlet didWarnValDefaultVal = false;\n\ntype TextAreaWithWrapperState = HTMLTextAreaElement & {\n  _wrapperState: {\n    initialValue: ToStringValue,\n  },\n};\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\nexport function getHostProps(element: Element, props: Object) {\n  const node = ((element: any): TextAreaWithWrapperState);\n  invariant(\n    props.dangerouslySetInnerHTML == null,\n    '`dangerouslySetInnerHTML` does not make sense on <textarea>.',\n  );\n\n  // Always set children to the same thing. In IE9, the selection range will\n  // get reset if `textContent` is mutated.  We could add a check in setTextContent\n  // to only set the value if/when the value differs from the node value (which would\n  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\n  // solution. The value can be a boolean or object so that's why it's forced\n  // to be a string.\n  const hostProps = {\n    ...props,\n    value: undefined,\n    defaultValue: undefined,\n    children: toString(node._wrapperState.initialValue),\n  };\n\n  return hostProps;\n}\n\nexport function initWrapperState(element: Element, props: Object) {\n  const node = ((element: any): TextAreaWithWrapperState);\n  if (__DEV__) {\n    ReactControlledValuePropTypes.checkPropTypes('textarea', props);\n    if (\n      props.value !== undefined &&\n      props.defaultValue !== undefined &&\n      !didWarnValDefaultVal\n    ) {\n      warning(\n        false,\n        '%s contains a textarea with both value and defaultValue props. ' +\n          'Textarea elements must be either controlled or uncontrolled ' +\n          '(specify either the value prop, or the defaultValue prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled textarea ' +\n          'and remove one of these props. More info: ' +\n          'https://fb.me/react-controlled-components',\n        getCurrentFiberOwnerNameInDevOrNull() || 'A component',\n      );\n      didWarnValDefaultVal = true;\n    }\n  }\n\n  let initialValue = props.value;\n\n  // Only bother fetching default value if we're going to use it\n  if (initialValue == null) {\n    let defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    let children = props.children;\n    if (children != null) {\n      if (__DEV__) {\n        warning(\n          false,\n          'Use the `defaultValue` or `value` props instead of setting ' +\n            'children on <textarea>.',\n        );\n      }\n      invariant(\n        defaultValue == null,\n        'If you supply `defaultValue` on a <textarea>, do not pass children.',\n      );\n      if (Array.isArray(children)) {\n        invariant(\n          children.length <= 1,\n          '<textarea> can only have at most one child.',\n        );\n        children = children[0];\n      }\n\n      defaultValue = children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    initialValue = defaultValue;\n  }\n\n  node._wrapperState = {\n    initialValue: getToStringValue(initialValue),\n  };\n}\n\nexport function updateWrapper(element: Element, props: Object) {\n  const node = ((element: any): TextAreaWithWrapperState);\n  const value = getToStringValue(props.value);\n  const defaultValue = getToStringValue(props.defaultValue);\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    const newValue = toString(value);\n    // To avoid side effects (such as losing text selection), only set value if changed\n    if (newValue !== node.value) {\n      node.value = newValue;\n    }\n    if (props.defaultValue == null && node.defaultValue !== newValue) {\n      node.defaultValue = newValue;\n    }\n  }\n  if (defaultValue != null) {\n    node.defaultValue = toString(defaultValue);\n  }\n}\n\nexport function postMountWrapper(element: Element, props: Object) {\n  const node = ((element: any): TextAreaWithWrapperState);\n  // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n  const textContent = node.textContent;\n\n  // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n  if (textContent === node._wrapperState.initialValue) {\n    node.value = textContent;\n  }\n}\n\nexport function restoreControlledState(element: Element, props: Object) {\n  // DOM component is still mounted; update\n  updateWrapper(element, props);\n}\n"]},"metadata":{},"sourceType":"module"}