{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { REACT_LAZY_TYPE } from 'shared/ReactSymbols';\nimport warning from 'shared/warning';\nexport function lazy(ctor) {\n  let lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null\n  };\n\n  if (__DEV__) {\n    // In production, this would just set it on the object.\n    let defaultProps;\n    let propTypes;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n\n        get() {\n          return defaultProps;\n        },\n\n        set(newDefaultProps) {\n          warning(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n\n      },\n      propTypes: {\n        configurable: true,\n\n        get() {\n          return propTypes;\n        },\n\n        set(newPropTypes) {\n          warning(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          propTypes = newPropTypes; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n\n      }\n    });\n  }\n\n  return lazyType;\n}","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react/src/ReactLazy.js"],"names":["REACT_LAZY_TYPE","warning","lazy","ctor","lazyType","$$typeof","_ctor","_status","_result","__DEV__","defaultProps","propTypes","Object","defineProperties","configurable","get","set","newDefaultProps","defineProperty","enumerable","newPropTypes"],"mappings":"AAAA;;;;;;AASA,SAAQA,eAAR,QAA8B,qBAA9B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,SAASC,IAAT,CAAoBC,IAApB,EAAkE;AACvE,MAAIC,QAAQ,GAAG;AACbC,IAAAA,QAAQ,EAAEL,eADG;AAEbM,IAAAA,KAAK,EAAEH,IAFM;AAGb;AACAI,IAAAA,OAAO,EAAE,CAAC,CAJG;AAKbC,IAAAA,OAAO,EAAE;AALI,GAAf;;AAQA,MAAIC,OAAJ,EAAa;AACX;AACA,QAAIC,YAAJ;AACA,QAAIC,SAAJ;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwBT,QAAxB,EAAkC;AAChCM,MAAAA,YAAY,EAAE;AACZI,QAAAA,YAAY,EAAE,IADF;;AAEZC,QAAAA,GAAG,GAAG;AACJ,iBAAOL,YAAP;AACD,SAJW;;AAKZM,QAAAA,GAAG,CAACC,eAAD,EAAkB;AACnBhB,UAAAA,OAAO,CACL,KADK,EAEL,sEACE,mEADF,GAEE,uDAJG,CAAP;AAMAS,UAAAA,YAAY,GAAGO,eAAf,CAPmB,CAQnB;;AACAL,UAAAA,MAAM,CAACM,cAAP,CAAsBd,QAAtB,EAAgC,cAAhC,EAAgD;AAC9Ce,YAAAA,UAAU,EAAE;AADkC,WAAhD;AAGD;;AAjBW,OADkB;AAoBhCR,MAAAA,SAAS,EAAE;AACTG,QAAAA,YAAY,EAAE,IADL;;AAETC,QAAAA,GAAG,GAAG;AACJ,iBAAOJ,SAAP;AACD,SAJQ;;AAKTK,QAAAA,GAAG,CAACI,YAAD,EAAe;AAChBnB,UAAAA,OAAO,CACL,KADK,EAEL,mEACE,mEADF,GAEE,uDAJG,CAAP;AAMAU,UAAAA,SAAS,GAAGS,YAAZ,CAPgB,CAQhB;;AACAR,UAAAA,MAAM,CAACM,cAAP,CAAsBd,QAAtB,EAAgC,WAAhC,EAA6C;AAC3Ce,YAAAA,UAAU,EAAE;AAD+B,WAA7C;AAGD;;AAjBQ;AApBqB,KAAlC;AAwCD;;AAED,SAAOf,QAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type {LazyComponent, Thenable} from 'shared/ReactLazyComponent';\n\nimport {REACT_LAZY_TYPE} from 'shared/ReactSymbols';\nimport warning from 'shared/warning';\n\nexport function lazy<T, R>(ctor: () => Thenable<T, R>): LazyComponent<T> {\n  let lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null,\n  };\n\n  if (__DEV__) {\n    // In production, this would just set it on the object.\n    let defaultProps;\n    let propTypes;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get() {\n          return defaultProps;\n        },\n        set(newDefaultProps) {\n          warning(\n            false,\n            'React.lazy(...): It is not supported to assign `defaultProps` to ' +\n              'a lazy component import. Either specify them where the component ' +\n              'is defined, or create a wrapping component around it.',\n          );\n          defaultProps = newDefaultProps;\n          // Match production behavior more closely:\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true,\n          });\n        },\n      },\n      propTypes: {\n        configurable: true,\n        get() {\n          return propTypes;\n        },\n        set(newPropTypes) {\n          warning(\n            false,\n            'React.lazy(...): It is not supported to assign `propTypes` to ' +\n              'a lazy component import. Either specify them where the component ' +\n              'is defined, or create a wrapping component around it.',\n          );\n          propTypes = newPropTypes;\n          // Match production behavior more closely:\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true,\n          });\n        },\n      },\n    });\n  }\n\n  return lazyType;\n}\n"]},"metadata":{},"sourceType":"module"}