{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport warningWithoutStack from 'shared/warningWithoutStack';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nlet warning = warningWithoutStack;\n\nif (__DEV__) {\n  warning = function (condition, format, ...args) {\n    if (condition) {\n      return;\n    }\n\n    const ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    const stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args\n\n    warningWithoutStack(false, format + '%s', ...args, stack);\n  };\n}\n\nexport default warning;","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/shared/warning.js"],"names":["warningWithoutStack","ReactSharedInternals","warning","__DEV__","condition","format","args","ReactDebugCurrentFrame","stack","getStackAddendum"],"mappings":"AAAA;;;;;;AAOA,OAAOA,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,oBAAP,MAAiC,6BAAjC;AAEA;;;;;;;AAOA,IAAIC,OAAO,GAAGF,mBAAd;;AAEA,IAAIG,OAAJ,EAAa;AACXD,EAAAA,OAAO,GAAG,UAASE,SAAT,EAAoBC,MAApB,EAA4B,GAAGC,IAA/B,EAAqC;AAC7C,QAAIF,SAAJ,EAAe;AACb;AACD;;AACD,UAAMG,sBAAsB,GAAGN,oBAAoB,CAACM,sBAApD;AACA,UAAMC,KAAK,GAAGD,sBAAsB,CAACE,gBAAvB,EAAd,CAL6C,CAM7C;;AACAT,IAAAA,mBAAmB,CAAC,KAAD,EAAQK,MAAM,GAAG,IAAjB,EAAuB,GAAGC,IAA1B,EAAgCE,KAAhC,CAAnB;AACD,GARD;AASD;;AAED,eAAeN,OAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport warningWithoutStack from 'shared/warningWithoutStack';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nlet warning = warningWithoutStack;\n\nif (__DEV__) {\n  warning = function(condition, format, ...args) {\n    if (condition) {\n      return;\n    }\n    const ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    const stack = ReactDebugCurrentFrame.getStackAddendum();\n    // eslint-disable-next-line react-internal/warning-and-invariant-args\n    warningWithoutStack(false, format + '%s', ...args, stack);\n  };\n}\n\nexport default warning;\n"]},"metadata":{},"sourceType":"module"}