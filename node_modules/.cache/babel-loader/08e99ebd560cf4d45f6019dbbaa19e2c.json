{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport invariant from 'shared/invariant';\nimport warningWithoutStack from 'shared/warningWithoutStack';\nimport { REACT_ELEMENT_TYPE } from 'shared/ReactSymbols';\nimport ReactCurrentOwner from './ReactCurrentOwner';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nlet specialPropKeyWarningShown, specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  const warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      warningWithoutStack(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  const warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      warningWithoutStack(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nconst ReactElement = function (type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\n\nexport function jsx(type, config, maybeKey) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, undefined, undefined, ReactCurrentOwner.current, props);\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nexport function jsxDEV(type, config, maybeKey, source, self) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (key || ref) {\n    const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n    if (key) {\n      defineKeyPropWarningGetter(props, displayName);\n    }\n\n    if (ref) {\n      defineRefPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nexport function createElement(type, config, children) {\n  let propName; // Reserved names are extracted\n\n  const props = {};\n  let key = null;\n  let ref = null;\n  let self = null;\n  let source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  const childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (__DEV__) {\n    if (key || ref) {\n      const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\nexport function createFactory(type) {\n  const factory = createElement.bind(null, type); // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook: remove it\n\n  factory.type = type;\n  return factory;\n}\nexport function cloneAndReplaceKey(oldElement, newKey) {\n  const newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nexport function cloneElement(element, config, children) {\n  invariant(!(element === null || element === undefined), 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element);\n  let propName; // Original props are copied\n\n  const props = Object.assign({}, element.props); // Reserved names are extracted\n\n  let key = element.key;\n  let ref = element.ref; // Self is preserved since the owner is preserved.\n\n  const self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  const source = element._source; // Owner will be preserved, unless ref is overridden\n\n  let owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    let defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  const childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nexport function isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}","map":{"version":3,"sources":["/Users/gaoshaoyun/Documents/library/debug-react/src/react/packages/react/src/ReactElement.js"],"names":["invariant","warningWithoutStack","REACT_ELEMENT_TYPE","ReactCurrentOwner","hasOwnProperty","Object","prototype","RESERVED_PROPS","key","ref","__self","__source","specialPropKeyWarningShown","specialPropRefWarningShown","hasValidRef","config","__DEV__","call","getter","getOwnPropertyDescriptor","get","isReactWarning","undefined","hasValidKey","defineKeyPropWarningGetter","props","displayName","warnAboutAccessingKey","defineProperty","configurable","defineRefPropWarningGetter","warnAboutAccessingRef","ReactElement","type","self","source","owner","element","$$typeof","_owner","_store","enumerable","writable","value","freeze","jsx","maybeKey","propName","defaultProps","current","jsxDEV","name","createElement","children","childrenLength","arguments","length","childArray","Array","i","createFactory","factory","bind","cloneAndReplaceKey","oldElement","newKey","newElement","_self","_source","cloneElement","assign","isValidElement","object"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport invariant from 'shared/invariant';\nimport warningWithoutStack from 'shared/warningWithoutStack';\nimport {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';\n\nimport ReactCurrentOwner from './ReactCurrentOwner';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true,\n};\n\nlet specialPropKeyWarningShown, specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  const warnAboutAccessingKey = function() {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      warningWithoutStack(\n        false,\n        '%s: `key` is not a prop. Trying to access it will result ' +\n          'in `undefined` being returned. If you need to access the same ' +\n          'value within the child component, you should pass it as a different ' +\n          'prop. (https://fb.me/react-special-props)',\n        displayName,\n      );\n    }\n  };\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true,\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  const warnAboutAccessingRef = function() {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      warningWithoutStack(\n        false,\n        '%s: `ref` is not a prop. Trying to access it will result ' +\n          'in `undefined` being returned. If you need to access the same ' +\n          'value within the child component, you should pass it as a different ' +\n          'prop. (https://fb.me/react-special-props)',\n        displayName,\n      );\n    }\n  };\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true,\n  });\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner,\n  };\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false,\n    });\n    // self and source are DEV only properties.\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self,\n    });\n    // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source,\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsx(type, config, maybeKey) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n\n  // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n  if (maybeKey !== undefined) {\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  }\n\n  // Remaining properties are added to a new props object\n  for (propName in config) {\n    if (\n      hasOwnProperty.call(config, propName) &&\n      !RESERVED_PROPS.hasOwnProperty(propName)\n    ) {\n      props[propName] = config[propName];\n    }\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    ref,\n    undefined,\n    undefined,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsxDEV(type, config, maybeKey, source, self) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n\n  // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n  if (maybeKey !== undefined) {\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  }\n\n  // Remaining properties are added to a new props object\n  for (propName in config) {\n    if (\n      hasOwnProperty.call(config, propName) &&\n      !RESERVED_PROPS.hasOwnProperty(propName)\n    ) {\n      props[propName] = config[propName];\n    }\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (key || ref) {\n    const displayName =\n      typeof type === 'function'\n        ? type.displayName || type.name || 'Unknown'\n        : type;\n    if (key) {\n      defineKeyPropWarningGetter(props, displayName);\n    }\n    if (ref) {\n      defineRefPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    ref,\n    self,\n    source,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nexport function createElement(type, config, children) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n  let self = null;\n  let source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        !RESERVED_PROPS.hasOwnProperty(propName)\n      ) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  if (__DEV__) {\n    if (key || ref) {\n      const displayName =\n        typeof type === 'function'\n          ? type.displayName || type.name || 'Unknown'\n          : type;\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n  return ReactElement(\n    type,\n    key,\n    ref,\n    self,\n    source,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\nexport function createFactory(type) {\n  const factory = createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook: remove it\n  factory.type = type;\n  return factory;\n}\n\nexport function cloneAndReplaceKey(oldElement, newKey) {\n  const newElement = ReactElement(\n    oldElement.type,\n    newKey,\n    oldElement.ref,\n    oldElement._self,\n    oldElement._source,\n    oldElement._owner,\n    oldElement.props,\n  );\n\n  return newElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nexport function cloneElement(element, config, children) {\n  invariant(\n    !(element === null || element === undefined),\n    'React.cloneElement(...): The argument must be a React element, but you passed %s.',\n    element,\n  );\n\n  let propName;\n\n  // Original props are copied\n  const props = Object.assign({}, element.props);\n\n  // Reserved names are extracted\n  let key = element.key;\n  let ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  const self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  const source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  let owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    let defaultProps;\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        !RESERVED_PROPS.hasOwnProperty(propName)\n      ) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\nexport function isValidElement(object) {\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    object.$$typeof === REACT_ELEMENT_TYPE\n  );\n}\n"]},"metadata":{},"sourceType":"module"}